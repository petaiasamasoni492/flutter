dependencies:
  flutter:
    sdk: flutter
  camera: ^0.10.0+1
  import 'dart:async';
import 'package:camera/camera.dart';
import 'package:flutter/material.dart';

class CameraLoopApp extends StatefulWidget {
  @override
  _CameraLoopAppState createState() => _CameraLoopAppState();
}

class _CameraLoopAppState extends State<CameraLoopApp> {
  CameraController? _controller;
  late List<CameraDescription> cameras;
  Timer? _timer;
  bool _isRecording = false;

  @override
  void initState() {
    super.initState();
    _initializeCamera();
  }

  // Initialize the camera
  Future<void> _initializeCamera() async {
    cameras = await availableCameras();
    _controller = CameraController(cameras[0], ResolutionPreset.high);
    await _controller!.initialize();
    if (mounted) {
      setState(() {});
      _startRecordingLoop();
    }
  }

  // Function to start and stop recording on a loop
  void _startRecordingLoop() {
    _timer = Timer.periodic(Duration(minutes: 4), (timer) async {
      if (_isRecording) {
        await _stopRecording();
        _isRecording = false;
      } else {
        await Future.delayed(Duration(minutes: 1)); // Stop for 1 minute
        await _startRecording();
        _isRecording = true;
      }
    });

    // Start recording immediately
    _startRecording();
    _isRecording = true;
  }

  // Start recording video
  Future<void> _startRecording() async {
    if (_controller != null && _controller!.value.isInitialized && !_controller!.value.isRecordingVideo) {
      await _controller!.startVideoRecording();
      print('Recording started');
    }
  }

  // Stop recording video
  Future<void> _stopRecording() async {
    if (_controller != null && _controller!.value.isRecordingVideo) {
      await _controller!.stopVideoRecording();
      print('Recording stopped');
    }
  }

  @override
  void dispose() {
    _timer?.cancel();
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_controller == null || !_controller!.value.isInitialized) {
      return Center(child: CircularProgressIndicator());
    }
    return Scaffold(
      appBar: AppBar(title: Text('Camera Loop')),
      body: CameraPreview(_controller!),
    );
  }
}

void main() => runApp(MaterialApp(home: CameraLoopApp()));
